{"version":3,"sources":["../external \"Cesium\"","components/Entity/index.js","utils/getPosition.js","utils/calculatePositions.js","utils/getPoints.js","components/Loading/style.js","components/Loading/index.js","components/ListOfEntities/index.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Cesium","EntityComponent","name","position","description","point","pixelSize","color","Color","PURPLE","getPosition","tle_l1","tle_l2","jsDate","satrec","satellite","positionEci","gmst","positionGd","longitudeRad","longitude","latitudeRad","latitude","height","calculatePositions","totalSeconds","timestepInSeconds","start","tl1","tl2","positionsOverTime","SampledPositionProperty","i","time","JulianDate","addSeconds","toDate","res","Cartesian3","fromDegrees","addSample","e","getPoints","a","fetch","headers","Accept","then","response","json","Div","styled","div","Iframe","iframe","Loading","button","src","frameborder","allowfullscreen","getElements","props","rawData","map","id","newData","ListOfEntities","useState","positions","setPositions","isLoading","setIsLoading","useEffect","autoPlay","Entity","key","App","fromDate","Date","stop","geocoder","full","enableLighting","startTime","currentTime","stopTime","clockRange","ClockRange","LOOP_STOP","clockStep","ClockStep","SYSTEM_CLOCK_MULTIPLIER","multiplier","shouldAnimate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Ion","defaultAccessToken","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b899804a.chunk.js","sourcesContent":["module.exports = Cesium;","import { Color } from \"cesium\";\nimport { Entity } from \"resium\";\n\nconst EntityComponent = ({ name, position, description }) => {\n  return (\n    <Entity\n      name={name}\n      description={description}\n      position={position}\n      point={{ pixelSize: 5, color: Color.PURPLE }}\n    ></Entity>\n  );\n};\n\nexport default EntityComponent;\n","import * as satellite from \"satellite.js\";\n\nconst getPosition = (tle_l1, tle_l2, jsDate) => {\n  const satrec = satellite.twoline2satrec(tle_l1, tle_l2);\n  const positionAndVelocity = satellite.propagate(satrec, jsDate);\n  const positionEci = positionAndVelocity.position;\n  // var velocityEci = positionAndVelocity.velocity;\n  // var observerGd = {\n  //   longitude: satellite.degreesToRadians(-122.0308),\n  //   latitude: satellite.degreesToRadians(36.9613422),\n  //   height: 0.37,\n  // };\n  const gmst = satellite.gstime(jsDate);\n\n  // var positionEcf = satellite.eciToEcf(positionEci, gmst);\n  // var lookAngles = satellite.ecfToLookAngles(observerGd, positionEcf);\n  const positionGd = satellite.eciToGeodetic(positionEci, gmst);\n  const longitudeRad = positionGd.longitude;\n  const latitudeRad = positionGd.latitude;\n  // heightRad = positionGd.height;\n\n  return {\n    longitude: satellite.degreesLong(longitudeRad),\n    latitude: satellite.degreesLat(latitudeRad),\n    height: positionGd.height * 1000,\n  };\n};\n\nexport default getPosition;\n","import getPosition from \"./getPosition\";\nimport { Cartesian3, JulianDate, SampledPositionProperty } from \"cesium\";\n\nconst calculatePositions = ({\n  totalSeconds,\n  timestepInSeconds,\n  start,\n  tl1,\n  tl2,\n}) => {\n  try {\n    const positionsOverTime = new SampledPositionProperty();\n    for (let i = 0; i < totalSeconds; i += timestepInSeconds) {\n      const time = JulianDate.addSeconds(start, i, new JulianDate());\n      const jsDate = JulianDate.toDate(time);\n      const res = getPosition(tl1, tl2, jsDate);\n      const position = Cartesian3.fromDegrees(\n        res.longitude,\n        res.latitude,\n        res.height\n      );\n      positionsOverTime.addSample(time, position);\n    }\n    return positionsOverTime;\n  } catch (e) {\n    // console.error(e);\n  }\n};\n\nexport default calculatePositions;\n","const getPoints = async (limit = 0) => {\n  let response = await fetch(\"data/data.json\", {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  }).then((response) => response.json());\n\n  return response;\n};\n\nexport default getPoints;\n","import styled from \"styled-components\";\n\nexport const Div = styled.div`\n  background-color: #5555ff99;\n  width: 60%;\n  max-width: 1000px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: white;\n  padding: 1rem;\n  z-index: 1000;\n`;\n\nexport const Iframe = styled.iframe`\n  display: block;\n  margin: 0px auto;\n  border: none;\n  width: 100%;\n  height: 50vh;\n`;\n\nexport const Button = styled.button`\n  width: 100%;\n  background-color: #9c4538;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  font-size: 2rem;\n  padding: 0.5rem 1rem;\n  cursor: pointer;\n  transition: 200ms ease;\n  &:hover {\n    background-color: #5c2921;\n  }\n`;\n","import { Div, Iframe } from \"./style\";\nconst Loading = () => {\n  return (\n    <Div>\n      <h1>Mapping Space Trash in Real Time</h1>\n\n      <main>\n        <Iframe src=\"loader.html\" frameborder=\"0\" allowfullscreen></Iframe>\n      </main>\n    </Div>\n  );\n};\n\nexport default Loading;\n","import { useState, useEffect } from \"react\";\nimport Entity from \"../Entity\";\nimport calculatePositions from \"../../utils/calculatePositions\";\nimport getPoints from \"../../utils/getPoints\";\nimport Loading from \"../Loading\";\n\nasync function getElements(props) {\n  let rawData = await getPoints();\n\n  let newData = await rawData.map(([id, name, tl1, tl2, description]) => {\n    const res = calculatePositions({ tl1, tl2, ...props });\n    return {\n      id,\n      description,\n      name,\n      position: res,\n    };\n  });\n\n  return newData;\n}\n\nconst ListOfEntities = (props) => {\n  const [positions, setPositions] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // const [limit, setLimit] = useState(0);\n\n  useEffect(() => {\n    (async () => {\n      const newData = await getElements(props);\n      setPositions(newData);\n      setIsLoading(false);\n    })();\n  }, [props]);\n\n  if (isLoading) {\n    return <Loading isLoading={isLoading} />;\n  }\n\n  return (\n    <div>\n      {/* <iframe\n        src=\"interestelar.mp3\"\n        className=\"invisible\"\n        title=\"YouTube video player\"\n        frameborder=\"0\"\n      ></iframe> */}\n      <audio autoPlay>\n        <source src=\"/interestellar.mp3\" />\n      </audio>\n      {positions.map((position) => (\n        <Entity {...position} key={position.id} />\n      ))}\n    </div>\n  );\n};\n\nexport default ListOfEntities;\n","import React from \"react\";\nimport { JulianDate, ClockRange, ClockStep } from \"cesium\";\nimport { Viewer, Clock, Globe } from \"resium\";\nimport ListOfEntities from \"./components/ListOfEntities\";\n\nexport default function App() {\n  const start = JulianDate.fromDate(new Date());\n  const totalSeconds = 60 * 30;\n  const stop = JulianDate.addSeconds(start, totalSeconds, new JulianDate());\n  const timestepInSeconds = 90;\n\n  return (\n    <Viewer geocoder={false} full>\n      <Globe enableLighting={true} />\n      <Clock\n        startTime={start}\n        currentTime={start}\n        stopTime={stop}\n        clockRange={ClockRange.LOOP_STOP} // loop when we hit the end time\n        clockStep={ClockStep.SYSTEM_CLOCK_MULTIPLIER}\n        multiplier={1} // how much time to advance each tick\n        shouldAnimate={true} // Animation on by default\n      />\n      <ListOfEntities\n        start={start}\n        timestepInSeconds={timestepInSeconds}\n        totalSeconds={totalSeconds}\n      />\n    </Viewer>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Ion } from \"cesium\";\n\nIon.defaultAccessToken =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIzMjRjZWU3MC0zODM5LTRiZTYtOWIyNi02OGIwNzBiYWUwNzAiLCJpZCI6NjkxNDAsImlhdCI6MTYzMzIxMzMwOH0.5SzYVr3yOJY70CueWRzwwsVoEoGZKqo_bA5Wgpqjvmc\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}